openapi: '3.0.2'
info:
  title: Waterkwaliteit-API
  version: '1.0'
  description: Definition of API to exchange aquatic data between (Dutch) organisations. Allows export and import.
  termsOfService: ...
  license:
    name: MIT
    url: ...
  contact: 
    email: geri.wolters@ecosys.nl
    name: Geri Wolters
    url: https://ecosys.nl
servers:
  - url: https://api.server.test/v1
security: 
  - {}
paths:
  /references:
    get:
      summary: Query references using OData.
      description: Query references using OData.
      operationId: reference
      tags: 
        - References
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/referencetype"
        '400':
          description: BAD
  
  /references/{type}:
    get:
      description: Retrieve known references of specified type in system.
      summary: Retrieve known references of specified type in system.
      operationId: reference-by-type
      parameters:
      - in: path
        required: true
        name: type
        schema:
          type: string
      - in: query
        $ref: "#/components/parameters/filter"
      - in: query
        $ref: "#/components/parameters/top"
      - in: query
        $ref: "#/components/parameters/count"
      - in: query
        $ref: "#/components/parameters/skip"
      - in: query
        $ref: "#/components/parameters/orderby"
      tags: 
        - References
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/reference"
        '400':
          description: BAD

  /observations:
    get:
      summary: Query observations using OData.
      description: Query observations using OData.
      operationId: observation
      parameters: 
        - in: query
          $ref: "#/components/parameters/filter"
        - in: query
          $ref: "#/components/parameters/top"
        - in: query
          $ref: "#/components/parameters/count"
        - in: query
          $ref: "#/components/parameters/skip"
        - in: query
          $ref: "#/components/parameters/orderby"
      tags: 
        - Observations
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/observation"
        '400':
          description: BAD
  /observations/bulk:
    get: 
      summary: Request the status of a bulk job.
      description: Request the status of a bulk job.
      operationId: observation-status-get
      tags: 
        - Observations
        - OData
      responses:
        '200':
          description: OK
        '400':
          description: BAD
          $ref: "#/components/responses/validation"
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '404':
          description: NOT FOUND
        '429':
          description: TOO MANY REQUESTS

    post: 
      summary: Import a new set of observations.
      description: Import a new set of observations.
      operationId: observation-import
      tags: 
        - Observations
        - OData
      responses:
        '202':
          description: ACCEPTED. Body contains transaction id
          content: 
            text/plain:
              schema:
                type: string
        '400':
          description: BAD REQUEST - Error in payload
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '413':
          description: PAYLOAD TOO LARGE
        '429':
          description: TOO MANY REQUESTS

    delete: 
      summary: Remove a set of observations.
      description: Remove a set of observations.
      operationId: observation-delete
      tags: 
        - Observations
        - OData
      responses:
        '202':
          description: ACCEPTED. Body contains transaction id
          content: 
            text/plain:
              schema:
                type: string
        '400':
          description: BAD REQUEST - Error in payload
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '413':
          description: PAYLOAD TOO LARGE
        '429':
          description: TOO MANY REQUESTS   
                
  /samples:
    get:
      summary: Query samples and associated observations using OData.
      description: Query samples and associated observations using OData.
      operationId: sample
      parameters: 
        - in: query
          $ref: "#/components/parameters/filter"
        - in: query
          $ref: "#/components/parameters/top"
        - in: query
          $ref: "#/components/parameters/count"
        - in: query
          $ref: "#/components/parameters/skip"
        - in: query
          $ref: "#/components/parameters/orderby"
      tags: 
      - Samples
      - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/sample"
        '400':
          description: BAD

  /observationcollections:
    get:
      summary: Query observation collections and associated observations using OData.
      description: Query observation collections and associated observations using OData.
      operationId: observationcollection
      parameters: 
        - in: query
          $ref: "#/components/parameters/filter"
        - in: query
          $ref: "#/components/parameters/top"
        - in: query
          $ref: "#/components/parameters/count"
        - in: query
          $ref: "#/components/parameters/skip"
        - in: query
          $ref: "#/components/parameters/orderby"
      tags: 
        - ObservationCollections
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/observationcollection"
        '400':
          description: BAD

components:
  securitySchemes: 
    OAUTHClient: 
      type: oauth2
      flows: 
        authorizationCode:
          authorizationUrl: ...
          tokenUrl: ...
          scopes:
            read: ...
    OAUTHMachine: 
      type: oauth2
      flows:
        clientCredentials: 
          tokenUrl: ...
          scopes:
            write: ...              

  schemas:
    count:
      anyOf:
        - type: integer
          minimum: 0
        - type: string
      description:
        The number of entities in the collection. Available when using
        the [$count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
        query option.

    entityReference:
      type: object
      properties:
        "@id":
          type: string
          format: uri
          description: "[Link to a related entity](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_LinktoRelatedEntitiesWhenCreatinganE)"

    error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
            message:
              type: string
            target:
              type: string
            details:
              type: array
              items:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  target:
                    type: string
            innererror:
              type: object
              description: The structure of this object is service-specific

    pagingBlock:
      type: object
      $ref: "#/components/schemas/entityReference"
      properties: 
        previousPage:
          type: string
          format: uri
        nextPage:
          type: string
          format: uri
        totalObjectCount:
          type: integer
        maxPageSize:
          type: integer
        $ref: "#/components/schemas/count"
          
    locationList:
      type: array
      items: 
        $ref: "#/components/schemas/location"
        
    parameterList:
      type: array
      items: 
        $ref: "#/components/schemas/parameter"
        
    compartmentList:
      type: array
      items: 
        $ref: "#/components/schemas/compartment"
        
    quantityList:
      type: array
      items: 
        $ref: "#/components/schemas/quantity"
        
    observationCollectionList:
      type: array
      items: 
        $ref: "#/components/schemas/observationCollection"

    observationList:
      type: array
      items: 
        $ref: "#/components/schemas/observation"
        
    sampleList:
      type: array
      items: 
        $ref: "#/components/schemas/sample"
        
    unitList:
      type: array
      items: 
        $ref: "#/components/schemas/unit"

    referenceList:
      type: array
      items: 
        anyOf: 
          -  $ref: "#/components/schemas/locationList"
          -  $ref: "#/components/schemas/compartmentList"
          -  $ref: "#/components/schemas/observationCollectionList"
          -  $ref: "#/components/schemas/sampleList"
          -  $ref: "#/components/schemas/unitList"
          -  $ref: "#/components/schemas/parameterList"
          -  $ref: "#/components/schemas/quantityList"
          -  $ref: "#/components/schemas/parameterList"

    reference:
      type: object
      $ref: "#/components/schemas/entityReference"
      properties:
        id:
          type: string
        code:
          type: string
        name:
          type: string
        href:
          type: string
        type:
          type: string
      required: 
        - id
        - code
        - type
  
    location:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: 
          type: string = 'location'
        geo: 
          type: 
            oneOf:
              - $ref: '#/components/schemas/geometry'
              - $ref: '#/components/schemas/geometryCollection'
              - $ref: '#/components/schemas/feature'
              - $ref: '#/components/schemas/featureCollection'
        namespace: string

    compartment:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: 
          type: string = 'compartment'

    observation:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: 
          type: string = 'observation'
    
    sample:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: 
          type: string = 'sample'
        # TODO: Additional properties
      relatedObservation:
        type: array
        items:
          $ref: '#/components/schemas/reference'
    
    observationCollection:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: 
          type: string = 'observationCollection'
        # TODO: Additional properties
      member:
        type: array
        items:
          $ref: '#/components/schemas/reference'

    unit:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: string = 'unit'
        symbol: string

    parameter:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: string = 'parameter'
        parametertype: string
        taxontype: string
        author: string
          
    quantity:
      type: object
      $ref: '#/components/schemas/reference'
      properties:
        type: string = 'quantity'

    referenceResult:
      type: array
      items: 
        allOf: 
          -  $ref: "#/components/schemas/pagingBlock"
          -  $ref: "#/components/schemas/referenceList"

    referenceTypeResult:
      type: array
      items: 
        type: string

    sampleResult:
      type: array
      items: 
        allOf: 
          -  $ref: "#/components/schemas/pagingBlock"
          -  $ref: "#/components/schemas/referenceList"
          -  $ref: "#/components/schemas/sampleList"

    observationResult:
      type: array
      items: 
        allOf: 
          -  $ref: "#/components/schemas/pagingBlock"
          -  $ref: "#/components/schemas/referenceList"
          -  $ref: "#/components/schemas/observationList"

    observationCollectionResult:
      type: array
      items: 
        allOf: 
          -  $ref: "#/components/schemas/pagingBlock"
          -  $ref: "#/components/schemas/referenceList"
          -  $ref: "#/components/schemas/observationCollectionList"

    validationResult:
      type: object

    geometry:
      type: object
      description: GeoJSon geometry
      properties:
        type: 
          type: string
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPoint
            - MultiLineString
            - MultiPolygon
      discriminator: 
        propertyName: type
      required:
        - type
          
    point:
      type: array
      description: Point in 2D space
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      minItems: 2
      maxItems: 2
      items:
        type: number
  
    lineString:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id3
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/point'
  
    polygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id4
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/point'
  
    multiPoint:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id5
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/point'
  
    multiLineString:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/point'
  
  
    multiPolygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/point'
  
    geometryCollection:
      type: object
      description: GeoJSon geometry collection
      required:
        - type
        - geometries
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometrycollection
      properties:
        type:
          type: string
          enum:
          - GeometryCollection
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/geometry'
  
    feature:
      type: object
      description: GeoJSon Feature
      required:
        - type
        - id
        - geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          type: integer
        geometry:
          $ref: '#/components/schemas/geometryCollection'
        properties:
          type: object
  
    featureCollection:
      type: object
      description: GeoJSon Feature collection
      required:
        - type
        - features
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      properties:
        type:
          type: string
          enum:
          - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/feature'

  parameters:
    top:
      name: $top
      in: query
      description: Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
      schema:
        type: integer
        minimum: 0
      example: 50

    filter:
      name: $filter
      in: query
      description: OData [filter](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
      schema:
        type: string

    skip:
      name: $skip
      in: query
      description: Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
      schema:
        type: integer
        minimum: 0

    count:
      name: $count
      in: query
      description: Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
      schema:
        type: boolean

    orderby:
      name: $orderby
      in: query
      description: Sorging of items, see [OrderBy](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
      schema:
        type: string

  responses:
    error:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"

    observation:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/observationResult"

    observationcollection:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/observationCollectionResult"

    sample:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/sampleResult"

    referencetype:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/referenceTypeResult"
        
    reference:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/referenceResult"
              
    validation:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/validationResult"
        