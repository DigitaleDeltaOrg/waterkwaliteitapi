openapi: '3.0.2'
info:
  title: Waterkwaliteit-API
  version: '1.0'
  description: Definition of API to exchange aquatic data between (Dutch) organisations. Allows export and import.
  termsOfService: ...
  license:
    name: MIT
    url: ...
  contact: 
    email: geri.wolters@ecosys.nl
    name: Geri Wolters
    url: https://ecosys.nl
servers:
  - url: https://api.server.test/v1
security: 
  - {}
paths:
  /references:
    get:
      summary: Query references using OData.
      description: Query references using OData.
      operationId: reference
      tags: 
        - References
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/referencetype"
        '400':
          description: BAD REQUEST
  
  /references/{type}:
    get:
      description: Retrieve known references of specified type in system.
      summary: Retrieve known references of specified type in system.
      operationId: reference-by-type
      parameters:
      - in: path
        required: true
        name: type
        schema:
          type: string
      - in: query
        $ref: "#/components/parameters/filter"
      - in: query
        $ref: "#/components/parameters/top"
      - in: query
        $ref: "#/components/parameters/count"
      - in: query
        $ref: "#/components/parameters/skip"
      - in: query
        $ref: "#/components/parameters/orderby"
      tags: 
        - References
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/reference"
        '400':
          description: BAD REQUEST

  /observations:
    get:
      summary: Query observations using OData.
      description: Query observations using OData.
      operationId: observation
      parameters: 
        - in: query
          $ref: "#/components/parameters/filter"
        - in: query
          $ref: "#/components/parameters/top"
        - in: query
          $ref: "#/components/parameters/count"
        - in: query
          $ref: "#/components/parameters/skip"
        - in: query
          $ref: "#/components/parameters/orderby"
      tags: 
        - Observations
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/observation"
        '400':
          description: BAD REQUEST
  /observations/bulk:
    get: 
      summary: Request an overview of all bulk-requests.
      description: Request an overview of all bulk-requests.
      operationId: observation-bulk-history
      tags: 
        - Bulk
      responses:
        '200':
          description: OK
        '400':
          description: BAD REQUEST
          $ref: "#/components/responses/validation"
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '404':
          description: NOT FOUND
        '429':
          description: TOO MANY REQUESTS

    post: 
      summary: Request inserts/updates of a set of observations.
      description: Request inserts/updates of a set of observations.
      operationId: observation-bulk-import
      tags: 
        - Bulk
        - Inserts
        - Updates
      responses:
        '202':
          description: ACCEPTED. Body contains transaction id
          content: 
            text/plain:
              schema:
                type: string
        '400':
          description: BAD REQUEST - Error in payload
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '413':
          description: PAYLOAD TOO LARGE
        '429':
          description: TOO MANY REQUESTS

    delete: 
      summary: Request removal of a set of observations.
      description: Request removal of a set of observations.
      operationId: observation-bulk-delete
      tags: 
        - Bulk
        - Delete
      responses:
        '202':
          description: ACCEPTED. Body contains transaction id
          content: 
            text/plain:
              schema:
                type: string
        '400':
          description: BAD REQUEST - Error in payload
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '413':
          description: PAYLOAD TOO LARGE
        '429':
          description: TOO MANY REQUESTS   
                
  /observations/bulk/{transactionId}:
    get: 
      summary: Request the status of a bulk job.
      description: Request the status of a bulk job.
      operationId: observation-bulk-status
      parameters:
        - in: path
          required: true
          name: transactionId
          schema:
            type: string    
      tags: 
        - Bulk
      responses:
        '200':
          description: OK
        '400':
          description: BAD
          $ref: "#/components/responses/validation"
        '401':
          description: UNAUTHORIZED
        '403':
          description: FORBIDDEN
        '404':
          description: NOT FOUND
        '429':
                  description: TOO MANY REQUESTS
 
  /samples:
    get:
      summary: Query samples and associated observations using OData.
      description: Query samples and associated observations using OData.
      operationId: sample
      parameters: 
        - in: query
          $ref: "#/components/parameters/filter"
        - in: query
          $ref: "#/components/parameters/top"
        - in: query
          $ref: "#/components/parameters/count"
        - in: query
          $ref: "#/components/parameters/skip"
        - in: query
          $ref: "#/components/parameters/orderby"
      tags: 
      - Samples
      - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/sample"
        '400':
          description: BAD

  /observationcollections:
    get:
      summary: Query observation collections and associated observations using OData.
      description: Query observation collections and associated observations using OData.
      operationId: observationcollection
      parameters: 
        - in: query
          $ref: "#/components/parameters/filter"
        - in: query
          $ref: "#/components/parameters/top"
        - in: query
          $ref: "#/components/parameters/count"
        - in: query
          $ref: "#/components/parameters/skip"
        - in: query
          $ref: "#/components/parameters/orderby"
      tags: 
        - ObservationCollections
        - OData
      responses:
        '200':
          description: OK
          $ref: "#/components/responses/observationcollection"
        '400':
          description: BAD

components:
  securitySchemes: 
    OAUTHClient: 
      type: oauth2
      flows: 
        authorizationCode:
          authorizationUrl: ...
          tokenUrl: ...
          scopes:
            read: ...
    OAUTHMachine: 
      type: oauth2
      flows:
        clientCredentials: 
          tokenUrl: ...
          scopes:
            write: ...              

  schemas:
    count:
      anyOf:
        - type: integer
          minimum: 0
        - type: string
      description:
        The number of entities in the collection. Available when using
        the [$count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
        query option.

    entityReference:
      type: object
      properties:
        "@id":
          type: string
          format: uri
          description: "[Link to a related entity](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_LinktoRelatedEntitiesWhenCreatinganE)"
      required:
        - "@id"

    error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
            message:
              type: string
            target:
              type: string
            details:
              type: array
              items:
                type: object
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  target:
                    type: string
            innererror:
              type: object
              description: The structure of this object is service-specific

    pagingBlock:
      type: object
      $ref: "#/components/schemas/entityReference"
      properties: 
        previousPage:
          type: string
          format: uri
        nextPage:
          type: string
          format: uri
        totalObjectCount:
          type: integer
        maxPageSize:
          type: integer
        $ref: "#/components/schemas/count"
          
    # ==== start lists ====
    locationList:
      type: array
      items: 
        $ref: "#/components/schemas/location"
        
    parameterList:
      type: array
      items: 
        $ref: "#/components/schemas/parameter"
        
    compartmentList:
      type: array
      items: 
        $ref: "#/components/schemas/compartment"
        
    quantityList:
      type: array
      items: 
        $ref: "#/components/schemas/quantity"
        
    observationCollectionList:
      type: array
      items: 
        $ref: "#/components/schemas/observationCollection"

    observationList:
      type: array
      items: 
        $ref: "#/components/schemas/observation"
        
    sampleList:
      type: array
      items: 
        $ref: "#/components/schemas/sample"
        
    unitList:
      type: array
      items: 
        $ref: "#/components/schemas/unit"

    referenceList:
      type: array
      items: 
        anyOf: 
          -  $ref: "#/components/schemas/locationList"
          -  $ref: "#/components/schemas/compartmentList"
          -  $ref: "#/components/schemas/observationCollectionList"
          -  $ref: "#/components/schemas/sampleList"
          -  $ref: "#/components/schemas/unitList"
          -  $ref: "#/components/schemas/parameterList"
          -  $ref: "#/components/schemas/quantityList"
          -  $ref: "#/components/schemas/parameterList"

    minimalReferenceList:
      type: array
      items: 
        anyOf: 
          -  $ref: "#/components/schemas/locationList"
          -  $ref: "#/components/schemas/compartmentList"
          -  $ref: "#/components/schemas/unitList"
          -  $ref: "#/components/schemas/parameterList"
          -  $ref: "#/components/schemas/quantityList"
          -  $ref: "#/components/schemas/parameterList"

    # ==== end list ====

    # ==== start supported observation types ====
    countObservation:
      type: object
      properties: 
        count: 
          type: number
      required:
        - number

    measureObservation:
      type: object
      properties:
        value: 
          type: number
        uom: 
          $ref: "#/components/schemas/reference"
      required:
        - value
        - uom 
    
    textObservation:
      type: object
      properties:
        text: 
          type: string
      required:
        - text

    truthObservation:
      type: object
      properties:
        truth: 
          type: boolean
      required:
        - truth

    vocabTermObservation:
      type: object
      properties: 
        term: 
          type: string
        vocabulary:
          $ref: "#/components/schemas/reference"
      required:
        - term

    # ==== end supported observation types ====

    # ==== start observations, samples and observationcollections 
    observation:
      allOf:
        - $ref: "#/components/schemas/entityReference"
        - type: object
          properties:
            type:
              description: Type of observation.
              enum:
                - count
                - measure
                - truth
                - vocab
                - text
              type: string
            phenomenonTime:
              description: Recorded time
              type: string
              format: date-time
            observedProperty:
              description: Property observed, i.e. Parameter
              $ref: "#/components/schemas/reference"
            procedure:
              desciption: Observation procedure
              $ref: "#/components/schemas/reference"
            samplingStrategy:
              description: Sample or strategy
              $ref: "#/components/schemas/reference"
            featureOfInterest:
              $ref: "#/components/schemas/reference"
            resultTime:
              description: Observed time
              type: string
              format: date-time
            result:
              description: result data, depending on type.
              oneOf: 
              - $ref: "#/components/schemas/measureObservation"
              - $ref: "#/components/schemas/vocabTermObservation"
              - $ref: "#/components/schemas/truthObservation"
              - $ref: "#/components/schemas/countObservation"
              - $ref: "#/components/schemas/textObservation"
          required: 
            - id
            - type
            - result

    sample:
      allOf:
        - $ref: "#/components/schemas/entityReference"
        - type: object
          properties:
            "@id":
              $ref: "#/components/schemas/entityReference"
            samplingLocation: 
              $ref: "#/components/schemas/reference"
            samplingMethod:
              $ref: "#/components/schemas/reference"       
            samplingTime: 
              type: string
              format: date-time
            sampledFeature:
              $ref: "#/components/schemas/reference"       
            relatedObservation:
              type: array
              items:
                $ref: '#/components/schemas/reference'
    
    observationCollection:
      allOf:
        - $ref: "#/components/schemas/entityReference"
        - type: object
          properties:
            member:
              type: array
              items:
                $ref: '#/components/schemas/reference'

    # ==== end observations, samples and observationcollections ====

    # ==== start references and related ====
    reference:
      allOf:
        - $ref: "#/components/schemas/entityReference"
        - type: object
          properties:
            id:
              type: string
            code:
              type: string
            name:
              type: string
            href:
              type: string
            type:
              type: string
          required: 
            - id
            - code
            - type
  
    location:
      allOf:
        - $ref: "#/components/schemas/reference"
        - type: object
          properties:
            geo: 
              oneOf:
                - $ref: '#/components/schemas/geometry'
                - $ref: '#/components/schemas/geometryCollection'
                - $ref: '#/components/schemas/feature'
                - $ref: '#/components/schemas/featureCollection'
            namespace: 
              type: string
            krwWaterType: 
              type: string

    compartment:
      allOf:
        - $ref: "#/components/schemas/reference"
        - type: object
          

    unit:
      allOf:
        - $ref: "#/components/schemas/reference"
        - type: object
          properties:
            symbol: 
              type: string

    parameter:
      allOf:
        - $ref: "#/components/schemas/reference"
        - type: object 
          properties:
            parametertype: 
              type: string
            taxontype: 
              type: string
            author: 
              type: string
          
    quantity:
      allOf:
        - $ref: "#/components/schemas/reference"
        - type: object
          
    # ==== end references and related ====

    # ==== start results ====
    referenceResult:
      type: array
      items: 
        allOf: 
          -  $ref: "#/components/schemas/pagingBlock"
          -  $ref: "#/components/schemas/minimalReferenceList"

    referenceTypeResult:
      type: array
      items: 
        type: string

    sampleResult:
      type: object
      properties:
        paging: 
          $ref: "#/components/schemas/pagingBlock"
        references: 
          $ref: "#/components/schemas/referenceList"
        result:   
          $ref: "#/components/schemas/sampleList"
      required:
        - paging
        - references
        - result   

    observationResult:
      type: object
      properties: 
        paging: 
          $ref: "#/components/schemas/pagingBlock"
        references: 
          $ref: "#/components/schemas/referenceList"
        result:   
          $ref: "#/components/schemas/observationList"
      required:
        - paging
        - references
        - result      

    observationCollectionResult:
      type: object
      properties:
        paging: 
          $ref: "#/components/schemas/pagingBlock"
        references: 
          $ref: "#/components/schemas/referenceList"
        result:   
          $ref: "#/components/schemas/observationCollectionList"
      required:
        - paging
        - references
        - result   
    
    validationResult:
      type: object
      # TODO

    # ==== end results ====
    # ==== start GeoJSON ====
    geometry:
      type: object
      description: GeoJSon geometry
      properties:
        type: 
          type: string
          enum:
            - Point
            - LineString
            - Polygon
            - MultiPoint
            - MultiLineString
            - MultiPolygon
      discriminator: 
        propertyName: type
      required:
        - type
          
    point:
      type: array
      description: Point in 2D space
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      minItems: 2
      maxItems: 2
      items:
        type: number
  
    lineString:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id3
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/point'
  
    polygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id4
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/point'
  
    multiPoint:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id5
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/point'
  
    multiLineString:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/point' 
  
    multiPolygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      allOf:
        - $ref: "#/components/schemas/geometry"
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/point'
  
    geometryCollection:
      type: object
      description: GeoJSon geometry collection
      required:
        - type
        - geometries
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometrycollection
      properties:
        type:
          type: string
          enum:
          - GeometryCollection
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/geometry'
  
    feature:
      type: object
      description: GeoJSon Feature
      required:
        - type
        - id
        - geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          type: integer
        geometry:
          $ref: '#/components/schemas/geometryCollection'
        properties:
          type: object
  
    featureCollection:
      type: object
      description: GeoJSon Feature collection
      required:
        - type
        - features
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      properties:
        type:
          type: string
          enum:
          - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/feature'
    # ==== end GeoJSON ====

  parameters:
    top:
      name: $top
      in: query
      description: Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop)
      schema:
        type: integer
        minimum: 0
      example: 50

    filter:
      name: $filter
      in: query
      description: OData [filter](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter)
      schema:
        type: string

    skip:
      name: $skip
      in: query
      description: Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip)
      schema:
        type: integer
        minimum: 0

    count:
      name: $count
      in: query
      description: Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount)
      schema:
        type: boolean

    orderby:
      name: $orderby
      in: query
      description: Sorging of items, see [OrderBy](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)
      schema:
        type: string

  responses:
    error:
      description: Error
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"

    observation:
      description: Observation result
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/observationResult"

    observationcollection:
      description: ObservationCollection result
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/observationCollectionResult"

    sample:
      description: Sample result
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/sampleResult"

    referencetype:
      description: Reference type result
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/referenceTypeResult"
        
    reference:
      description: Reference result
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/referenceResult"
              
    validation:
      description: Validation result
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/validationResult"
        